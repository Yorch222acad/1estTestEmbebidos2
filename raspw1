# Importaciones:
from machine import Pin, PWM
import sys  # Uart vía USB
import select  # UART no bloqueante
import utime

#======================================================
# Variables globales:
tIter = 0
frecuencia = 1000

# Configuraciones de pines:
#-------------------------{ Leds
led0 = machine.Pin("LED", machine.Pin.OUT)  # Configura el Led integrado como salida
led1 = Pin(10, Pin.OUT)  # Actividad Uart
led2 = Pin(11, Pin.OUT)  # Motor 1
led3 = Pin(12, Pin.OUT)  # Motor 2
led4 = Pin(13, Pin.OUT)  # Ultrasonico
#}------------------------{ Buzzer
Buzzer = Pin(16, Pin.OUT)
#}------------------------{ PWM
Pwm1 = PWM(Pin(14))
dir2 = Pin(2, Pin.OUT)
dir1 = Pin(3, Pin.OUT)
Pwm2 = PWM(Pin(15))
dir3 = Pin(4, Pin.OUT)
dir4 = Pin(5, Pin.OUT)
# ------------------
Pwm1.freq(frecuencia)
Pwm2.freq(frecuencia)
#}------------------------{ Ultrasonico
trig = Pin(18, Pin.OUT)
echo = Pin(19, Pin.IN)
#}--

# Configuración Uart no bloqueante
poll = select.poll()
poll.register(sys.stdin, select.POLLIN)

#======================================================

def main():
    # Variables locales:
    #----------------------{ Buzzer
    BuzzerState = False
    #}---------------------{ Motores
    mtr1Stt = False
    mtr2Stt = False
    duty = 50
    #}---------------------{ Ultrasonico

    try:
        while True:
            led0.value(0)
            
            #-----------------------
            distance = LectrUltrasonico()
            if distance == -1:
                led4.toggle()
                utime.sleep_ms(100)
            #-----------------------
            BuzzerState, mtr1Stt, mtr2Stt, duty = UartHandler(BuzzerState, mtr1Stt, mtr2Stt, duty)
            #-----------------------
            if BuzzerState:
                if interactiveDelay(2.0):
                    BuzzerState = False
                    Buzzer.value(0)
            #-----------------------
            if distance >= 0 and distance < 10:
                led4.value(1)
                if mtr1Stt:
                    Pwm1.duty_u16(0)
                    dir1.value(1)
                    dir2.value(0)
                if mtr2Stt:
                    Pwm2.duty_u16(0)
                    dir3.value(1)
                    dir4.value(0)
            else:
                led4.value(0)
                if mtr1Stt:
                    Pwm1.duty_u16(duty)
                    dir1.value(1)
                    dir2.value(0)
                if mtr2Stt:
                    Pwm2.duty_u16(duty)
                    dir3.value(1)
                    dir4.value(0)
                
    except Exception as e:
        led0.toggle()
        utime.sleep_ms(200)
        led0.toggle()
        utime.sleep_ms(200)

#======================================================

def interactiveDelay(time_sec):
    global tIter
    if tIter == 0:
        # Guardar el instante de inicio en milisegundos
        tIter = utime.ticks_add(utime.ticks_ms(), int(time_sec * 1000))
    # Verificar si ya pasó el tiempo deseado
    if utime.ticks_diff(tIter, utime.ticks_ms()) <= 0:
        tIter = 0
        return True  # señal de que el tiempo terminó
    return Fals
