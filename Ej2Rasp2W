from machine import Pin, PWM
import sys  # UART vía USB
import select  # UART no bloqueante
import utime

#======================================================
# Variables globales:
tIter = 0
frecuencia = 1000

# Configuraciones de pines:
#-------------------------{ Leds
led0 = Pin("LED", Pin.OUT)  # Configura el Led integrado como salida
led1 = Pin(10, Pin.OUT)  # LED 1
led2 = Pin(11, Pin.OUT)  # LED 2
led3 = Pin(12, Pin.OUT)  # LED 3
led4 = Pin(13, Pin.OUT)  # LED 4
#------------------------{ Buzzer
Buzzer = Pin(16, Pin.OUT)
#------------------------{ PWM
Pwm1 = PWM(Pin(14))
dir2 = Pin(2, Pin.OUT)
dir1 = Pin(3, Pin.OUT)
Pwm2 = PWM(Pin(15))
dir3 = Pin(4, Pin.OUT)
dir4 = Pin(5, Pin.OUT)
# ------------------
Pwm1.freq(frecuencia)
Pwm2.freq(frecuencia)
#------------------------{ Ultrasonico
trig = Pin(18, Pin.OUT)
echo = Pin(19, Pin.IN)
#------------------------

# Configuración Uart no bloqueante
poll = select.poll()
poll.register(sys.stdin, select.POLLIN)

#======================================================

def main():

    # Apagar todos los LEDs al inicio
    led1.value(0)
    led2.value(0)
    led3.value(0)
    led4.value(0)
    
    try:
        while True:
            UartHandler()

                
    except Exception as e:
        #led0.toggle()
        utime.sleep_ms(200)
        #led0.toggle()
        utime.sleep_ms(200)

#======================================================

def interactiveDelay(time_sec):
    global tIter
    if tIter == 0:
        # Guardar el instante de inicio en milisegundos
        tIter = utime.ticks_add(utime.ticks_ms(), int(time_sec * 1000))
    # Verificar si ya pasó el tiempo deseado
    if utime.ticks_diff(tIter, utime.ticks_ms()) <= 0:
        tIter = 0
        return True  # señal de que el tiempo terminó
    return False

#-----------------------------------------------------------------------

def UartHandler():
    if poll.poll(0):
        #led0.value(1)
        linea = sys.stdin.readline().strip()

        # ---- LEDs según valores UART ----
        if linea == "1":
            led1.value(1)
            led2.value(0)
            led3.value(0)
            led4.value(0)
        elif linea == "2":
            led1.value(1)
            led2.value(1)
            led3.value(0)
            led4.value(0)
        elif linea == "3":
            led1.value(1)
            led2.value(1)
            led3.value(1)
            led4.value(0)
        elif linea == "4":
            led1.value(1)
            led2.value(1)
            led3.value(1)
            led4.value(1)
        elif linea == "0":
            led1.value(0)
            led2.value(0)
            led3.value(0)
            led4.value(0)


#-----------------------------------------------------------------------

if __name__ == "__main__":
    main()
