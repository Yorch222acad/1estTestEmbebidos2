import cv2
import RPi.GPIO as GPIO
import serial
from time import sleep

# Configuración de UART
ser = serial.Serial('/dev/ttyACM0', 9600)
ser.reset_input_buffer()

# Dirección de la cámara DroidCam
droidcam_url = "http://10.204.219.56:4747/video"
cap = cv2.VideoCapture(droidcam_url)

if not cap.isOpened():
    print("Error: No se pudo abrir la cámara.")
    exit()

# Configuración de GPIO para LEDs
GPIO.setmode(GPIO.BCM)
led_pins = [17, 27, 22, 5]  # Suponiendo que usas pines GPIO para LEDs
for pin in led_pins:
    GPIO.setup(pin, GPIO.OUT, initial=GPIO.LOW)  # Inicializamos los LEDs apagados

def turn_on_led(led_number):
    # Encender los LEDs según el número recibido
    for i in range(4):
        GPIO.output(led_pins[i], GPIO.HIGH if i < led_number else GPIO.LOW)

while True:
    try:
        # Leer los fotogramas desde la cámara
        ret, frame = cap.read()
        if not ret:
            print("Error: No se pudo obtener el fotograma.")
            break

        hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)

        lower_blue = (100, 150, 0)
        upper_blue = (140, 255, 255)
        mask_blue = cv2.inRange(hsv, lower_blue, upper_blue)

        mask_blue = cv2.GaussianBlur(mask_blue, (5, 5), 0)
        contours, _ = cv2.findContours(mask_blue, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

        contours = [cnt for cnt in contours if cv2.contourArea(cnt) > 500]

        blue_objects = 0
        for contour in contours:
            (x, y, w, h) = cv2.boundingRect(contour)
            if w > 30 and h > 30:  # Limita el tamaño mínimo del objeto
                blue_objects += 1

        blue_objects = min(blue_objects, 4)

        print(f"Objetos azules detectados: {blue_objects}")
        ser.write(str(blue_objects).encode() + b'\n')

        turn_on_led(blue_objects)
        cv2.imshow('Droicam', frame)

        # Salir si se presiona 'q'
        key = cv2.waitKey(1) & 0xFF
        if key == ord('q'):
            break

    except Exception as e:
        print(e)
        break

# Cerrar la conexión UART y liberar la cámara al finalizar
ser.close()
cap.release()
cv2.destroyAllWindows()
